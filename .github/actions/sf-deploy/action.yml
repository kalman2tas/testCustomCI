name: Salesforce Metadata Deploy
description: Builds and deploys metadata to a specified environment
author: accadzo
branding:
  icon: code
  color: blue

inputs:
  DRY_RUN:
    description: "Validate deploy and run Apex tests but don't save to the org."
    type: boolean
  TEST_LEVEL:
    description: "Deployment Apex testing level."
    type: choice
    default: RunLocalTests
    options:
      - NoTestRun
      - RunSpecifiedTests
      - RunLocalTests
      - RunAllTestsInOrg
  WAIT:
    description: "Number of minutes to wait for command to complete and display results."
    type: number
    default: 30
  SFDX_AUTH_URL:
    description: "The auth url tied to your deployment environment"
    type: string
    required: true

runs:
  using: "composite"
  steps:
    - name: Install Salesforce CLI
      shell: bash
      run: |
        npm install -g @salesforce/cli
        echo y | sf plugins:install sfdx-git-delta  
    - name: Login to Environment
      shell: bash
      run: |
        sf org login sfdx-url --set-default --sfdx-url-file <(echo "${{ inputs.SFDX_AUTH_URL }}")
    - name: Fetch branches
      shell: bash
      run: |
        git fetch origin ${{ github.event.pull_request.base.ref }}:${{ github.event.pull_request.base.ref }}
        git fetch origin ${{ github.event.pull_request.head.ref }}:${{ github.event.pull_request.head.ref }}
    - name: Generate package.xml
      shell: bash
      run: |
        BASE_BRANCH="${{ github.event.pull_request.base.ref }}"
        COMPARE_BRANCH="${{ github.event.pull_request.head.ref }}"
        sf sgd:source:delta --to "refs/heads/$COMPARE_BRANCH" --from "refs/heads/$BASE_BRANCH" --output '.'
        echo "Deployment package:"
        cat package/package.xml
        echo -e "\nDestructive Changes:"
        cat destructiveChanges/destructiveChanges.xml
    - name: Collect test classes
      shell: bash
      run: |
        if [[ "${{ inputs.TEST_LEVEL }}" == "RunSpecifiedTests" ]]; then
          TESTS=$(python ./.github/scripts/testCollector.py)
          echo "TEST_LIST=$TESTS" >> $GITHUB_ENV
          echo "The following tests were specified to run:" $TESTS
        fi
    - name: Deploy to Environment
      shell: bash
      run: |
        deployFlags=(
            --manifest package/package.xml
            --post-destructive-changes destructiveChanges/destructiveChanges.xml
            --wait ${{ inputs.WAIT }}
        )
        if [[ "${{ inputs.TEST_LEVEL }}" == "RunSpecifiedTests" && -n "$TEST_LIST" ]]; then
          deployFlags+=( --test-level ${{ inputs.TEST_LEVEL }} )
          deployFlags+=( --tests $TEST_LIST )
          echo "Test runs in the following mode: RunSpecifiedTests"
        fi
        if [[ "${{ inputs.TEST_LEVEL }}" != "RunSpecifiedTests" ]]; then
          deployFlags+=( --test-level ${{ inputs.TEST_LEVEL }} )
          echo "Test runs in the following mode: "${{ inputs.TEST_LEVEL }}
        fi
        if [[ "${{ inputs.TEST_LEVEL }}" == "RunSpecifiedTests" && -z "$TEST_LIST" ]]; then
          deployFlags+=( --test-level NoTestRun )
          echo "Test runs in the following mode: NoTestRun"
        fi
        if [ "${{ inputs.DRY_RUN }}" = "true" ]; then
          deployFlags+=( --dry-run )
        fi
        sf project deploy start "${deployFlags[@]}"
    - name: Capture Deployment ID
      shell: bash
      id: get-deploy-id
      run: |
        echo "Running sfdx force:source:deploy:report"
        DEPLOY_ID=$(sfdx force:source:deploy:report --json | jq -r .result.id)
        
        if [ -z "$DEPLOY_ID" ]; then
          echo "Error: Deployment ID is empty"
          sfdx force:source:deploy:report --json
          exit 1
        fi
        
        echo "DEPLOY_ID: $DEPLOY_ID"
        
        echo "deploy-id=$DEPLOY_ID" >> $GITHUB_ENV
        echo "::set-output name=deploy-id::$DEPLOY_ID"

    - name: Generate variable
      shell: bash
      run: echo "${{ github.event.pull_request.number }}=${{ steps.get-deploy-id.outputs.deploy-id }}" > ${{ github.event.pull_request.number }}.txt

    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: deployment-id
        path: "${{ github.event.pull_request.number }}.txt"

    - name: Quick Deploy
      if: ${{ inputs.TEST_LEVEL == 'NoTestRun' && inputs.DRY_RUN != 'true' }}
      shell: bash
      run: |
        DEPLOY_ID=$(cat "${{ github.event.pull_request.number }}.txt")
        sfdx force:source:deploy --validateddeployrequestid "${DEPLOY_ID}" --targetusername my-org --wait 10